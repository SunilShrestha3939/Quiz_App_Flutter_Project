*** main.dart
    * MaterialApp provides shell with behind the scene configuration for actual user interface we are gona display. SET UP GENERAL APP SHELL
    * Scaffold used to set up screen displayed to user
    * In 'home: Scaffold' home is argument and Scaffold is Widget
    * here, we want to show different questions in same background so we use "Scaffold" as wrapper of different custom widget
    * if we want to have the gradiant color on entire screen then we have to pick some content present inside container that occupies the entire screen
        * by default 'Text' widget occupies only needed space
        * to change that we have to wrap it with 'Center' widget
        * 'Center' widget tryies to take as much space as it can to make its child widget center both horizontally or vertically
            * here, as 'Center' widget is the first widget used inside of the 'Container' inside of the 'Scaffold'
            * so it takes the entire available screen
            * because neither Scaffold nor Container do by default take up any space themselves
                so as a result 'Center' will take the entire screen width and height. Surrounding Scaffold and container widget will apply their setting and their decorations to the center widget





*** start_screen.dart
    * class name should follow naming convention (start capital letter & if two words seperate by underscore or capital letter)
    * "Extend" should be done one of two ways 
        * "StatelessWidget" - if no need to change
        * "StatefullWidget" - if need to change
    * "super.key" - widget accept KEY and also forwards to widget class
    * "this.key" -  widget accepts and potentilaly uses the key
    * In 'Column', mainAxis is vertical and in 'Row', mainAxis is horizontal
    * We can also put icon in button by calling in-build constructor function 'OutlinedButton.icon' 




***quiz.dart
    *   making this class 'Quiz' to inherit StatefullWidget as it needs to change state
    *   'var' keyword infers its type from the value used to initialize it (ie its type / class)
    *   First of all "activeScreen" is initialized to 'StartScreen'. Then due to some reason if 'switchScreen' gets executed it changes its value to 'QuestionsScreen' and as it is in 'setState' function it re-executes build method and find change in value of 'activeScreen' so updates the rendered UI. 
    *   initState will execute once after the object has been created. So we can use the variables and referance switchScreen function but initState will then never execute thereafter again    
    *   once 

***questions_screen.dart
    *   Inside children list it wants only widget, so converting string into widget is not enough as they are in list after being converted to widget. Instead we have to do "spreading"-adding three dots in front, which seperate the iterables generated by map into couple of individual values
    *   "Shuffle"-unlike map it does change the original list, So we have to make copy of the answers of questions as once they are shuffled it will be impossible to know the correct answer cuz first answer option of every question is correct answer. 
    *   Inorder to use the function present in Widget class in StatefullWidget we have to use "widget" instance variable



***models/quiz_questions.dart
    * contains questions blue print





***data/questions.dart
    *   define all questions



***answer_button.dart
    *   inorder to have same style in all answer options and easy to modify 
    *   inorder to pass answers as argument we must set constructor and variable to use that argument
    *   to style button we use 'ElevatedButton.styleFrom'-ElevatedButton widget and styleFrom method
    *   