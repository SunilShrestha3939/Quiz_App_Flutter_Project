Main idea
    - we want to create a quiz app which contains starting screen, quiz screen and result screen
    - starting screen
        - contains some image, text, and button 
    - quiz screen
        - contains question and various options of answers
    - result screen 
        - contains text saying no. of correct answers, widget showing us choosen_answers and correct_answer, and reset button


Why?
    -



main.dart -- contains main() function
quiz.dart -- 
    WHAT IT DOES??
    - StatefullWidget
    - initiallize the activeScreen variable to startScreen widget
    - it creates a container which have gradient color effect
    - calls activeScreen variable which stores startScreen as a value ie when called startScreen widget is executed, which accepts switchScreen function as argument 
    - inside startScreen widget on pressing the button, switchScreen function is called, inside which value of activeScreen variable is changed  to QuestionsScreen widget, which accept the choosenAnswer function as argument
    - inside QuestionScreen widget on pressing the answer button, selected answer is passed to answerQuestion function, inside which that answer is passed to choosenAnswer function, which append and stores the selected data to display letter




Explanation on logic
    - to create new flutter project, open terminal --> flutter create "name"
    - first of all we have to start with "main.dart" file which must contain "main()" function, inside which "runApp()" widget should be called.
    -  pass the root widget (Quiz()) on runApp() function which starts the rendering process.
    -  




WIDGET_TREE 
(notation:  -> inside parent widget
            -  about parent widget)

    Quiz() 
        - StatefullWidget
        - 'initState' function is executed before 'build' function,
            - first, 'activeScreen' variable is just initialized to "StartScreen(switchScreen)" but keep in mind its not executed yet.
            - then, widgets inside of 'build' func is executed 
                - MaterialApp() -> Scaffold() -> Container() 
                    - then inside decoration: BoxDecoration, the background of whole app is designed  
                    - then in child: activeScreen, variable is called ie now executed which was assigned before, (currently StartScreen(switchScreen)) 
                        - "activeScreen" variable - used to conveniently output different Widgets   
    
    
    StartScreen(switchScreen)
        - StatelessWidget 
        - Center() -> Column()
            - Image() ->SizedBox() ->Text() ->OutlinedButton()
                - onPressed: startQuiz (ie switchScreen() function of Quiz() widget)
                    ->Quiz().switchScreen()
                        - activeScreen = QuestionsScreen(onSelectAnswer: choosenAnswer)
                        - activeScreen variable is assigned QuestionsScreen(onSelectAnswer: choosenAnswer) inside setState() function, which causes change in internal state of object of class Quiz() and impact the user interface in this subtree (ie StartScreen()), so rendered UI is updated


    QuestionsScreen(onSelectAnswer: choosenAnswer)
        - StatefullWidget
        -> SizedBox() ->Container() ->Column() 
            -> Text() 
            -> SizedBox() 
            -> ...currentQuestion.getShuffledAnswers().map() -> return-AnswerButton()
                - 'currentQuestion' contains object of class-QuizQuestion,which contains current question being rendered in UI , so it is of type QuizQuestion()
                - '.getShuffledAnswers()'- uses the method of class QuizQuestion, ("object.method()") which Shuffles the list of answers (first copies then shuffles) and  map() builtin function is used to convert string type answers into AnswerButton type widget
                - converts string type 'answers' of list of questions to widget type 'AnswerButton()'
                - As "children" argument wants widget, but now we contain List of widget which was previously List of Strings, so to make List into individual values we spread the list which is done by adding "..." infront 
                    - On AnswerButton() -> answerQuestion(selectedAnswer) 
                        ->  Quiz.choosenAnswer(selectedAnswer)
                            -> selectedAnswer.append 
                            -> activeScreen = ResultScreen(selectedAnswers, resetQuiz,)   
                                - afer all questions has been answered


    ResultScreen(choosenAnswer: selectedAnswers, resetScreen: resetQuiz,)        
        - StatelessWidget
        -> SizedBox() ->Container() ->Column()
            -> Text()
            -> SizedBox()
            -> QuestionsSummery(summeryData)
            -> SizedBox()
            -> ElevatedButton.icon()
                -> Quiz.resetQuiz()
                    - resets activeScreen variable to StartScreen


    QuestionsSummery(summeryData)
        - StatelessWidget
        -> SizedBox() ->SingleChildScrollView() ->Column() 
            -> summeryData.map(data) -> return- Row()
                - under this all "text" contains the data from "summeryData"
                - it converts List<Map<String, Object>> to List<Widget>
                -> Text()
                -> Expanded() ->Column() 
                    -> Text()
                    -> SizedBox()
                    -> Text()
                    -> Text() 
                    



    - Quiz() --> StartScreen(switchScreen) ---Quiz.switchScreen()--> QuestionScreen(onSelectAnswer: choosenAnswer) ---Quiz.choosenAnswer(selectedAnswer)--> ResultScreen(choosenAnswer: selectedAnswers, resetScreen: resetQuiz) -->  QuestionsSummery(summeryData) ---Quiz.resetQuiz()--> StartScreen(switchScreen)








INTERESTING CONCEPT     


    # Class -- 
        - Defines a blueprint for creating objects with properties(variable/attributes) and methods(function/behavior).
        - Used to encapsulate and reuse logic and data structures.
        - Can have mutable state (variables that can change).

    # Widget -- 
        - Describes a part of the user interface in Flutter.
        - Used to define the structure and appearance of the UI.
        - Widgets are immutable. Once created, their properties cannot be changed. If a widget needs to change, a new instance must be created.
        # StatefullWidget -- If a widget can changeâ€”when a user interacts with it
        # StatelessWidget -- widget never changes
                            - A stateful widget is implemented by two classes: a subclass of 'StatefulWidget' and a subclass of 'State'.
                            - The state class contains the widget's mutable state and the widget's build() method.
                            - A widget's state is stored in a State object.
                            - When the widget's state changes, the state object calls setState(), telling the framework to redraw the widget. 

    # Object --
        - An object is created from a class, Each object created from the same class will have the same properties and methods but can hold different values for its properties.
        - even if two objects have the same values for their properties their uniqueness is typically managed by memory address in low-level programming.
        - objects are extensively used to manage UI components and state. Widgets themselves are objects that encapsulate properties and methods to define the user interface.
        - State of an object is defined by its properties, ie data hold by properties
        - behavior of an object is defined by its methods


    # runApp --
        - sets up the root widget and the necessary infrastructure for the app.
        - starts the rendering process, which converts the widget tree into the actual UI displayed on the device.


    # MaterialApp -- 
        - MaterialApp is a widget provided by the Flutter framework, which is designed to provide a structure for implementing Material Design, which is a design language developed by Google, which aims to create a consistent and cohesive user experience across all of Google's products and platforms
        - it is the root of the application
        - It includes several properties:
            title: The name of the app.
            theme: Defines the theme of the app, such as colors and fonts.
            home: The widget that is displayed when the app starts.
        - it provides consistent UI following Material Design guidelines and ensure modern design standards

    
    # Scaffold --  
        - is a fundamental layout structure that provides a framework for implementing the basic material design visual layout structure of an app.
        - By using the Scaffold widget, we can focus on building the unique aspects of our app while leveraging the standardized layout and interaction patterns provided by Material Design.
        - Using Scaffold, you can quickly set up the basic layout of your Flutter app, ensuring it follows Material Design principles and provides a good user experience.
        - It includes built-in support for many common UI elements like AppBar, Drawer, BottomNavigationBar, FloatingActionButton, and more.


    # Container --
        - widget that allows you to create a rectangular visual element.
        - used for various purposes, such as adding padding, margins, decorations, and alignment to its child widget.
        - used for creating styled and positioned widgets in Flutter.







